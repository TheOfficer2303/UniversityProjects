1. Pronađite dijelove assemblerskog kôda u kojima se odvija alociranje memorije za objekte poc i *pb.
  Linija 59 sub rsp, 24

2. Objasnite razliku u načinu alociranja tih objekata.
  poc se kreira na stogu (bez konstruktora), pb na gomili (s konstruktorom)

3. Pronađite dio assemblerskog kôda koji je zadužen za poziv konstruktora objekta poc, ako takav poziv postoji.
  Ne postoji poziv jer konstruktor nije eksplicitno naveden i jer nema potrebe za kreiranjem virtualne tablice za klasu PlainOldClass.

4. Pronađite dio assemblerskog kôda koji je zadužen za poziv konstruktora objekta *pb. Razmotrite kako se točno izvršava taj kôd. Što se u njemu događa?
  Na liniji 64 ( call CoolClass::CoolClass() [complete object constructor]) poziva se konstruktor. U njemu se alocira memorija za virtualnu tablicu, poziva se konstruktor nadklase te se inicijalizira virtualna tablica za objekt pb.

5. Promotrite kako je prevoditelj izveo pozive pb->set i poc.set. Objasnite razliku između izvedbi tih dvaju poziva. Koji od ta dva poziva zahtijeva manje instrukcija?
   Za koju od te dvije izvedbe bi optimirajući prevoditelj mogao generirati kôd bez instrukcije CALL odnosno izravno umetnuti implementaciju funkcije (eng. inlining)?
    - poc.set(42); - Ne zahtijeva pristup virtualnoj tablici
    - pb->set(42); - Zahtijeva pristup virtualnoj tablici

6. Pronađite asemblerski kôd za definiciju i inicijalizaciju tablice virtualnih funkcija razreda CoolClass.
- Inicijalizacija u konstruktoru poslije poziva konstruktora nadklase na liniji 49
- Definicija kod oznake "vtable for CoolClass" na linijama 81-85.
